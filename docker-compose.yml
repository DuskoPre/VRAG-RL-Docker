version: '3.8'

services:
  vrag-search:
    build:
      context: .
      dockerfile: Dockerfile
      target: final
    image: vrag-app:latest
    container_name: vrag-search-engine
    ports:
      - "8002:8002"
    volumes:
      - ./search_engine/corpus:/app/search_engine/corpus
      - ./models:/app/models
      - vrag_data:/app/data
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - PYTHONPATH=/app
      - SEARCH_PORT=8002
    networks:
      - vrag-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    command: >
      bash -c "
        echo 'Starting search engine server...' &&
        cd /app &&
        python search_engine/search_engine_api.py
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  vrag-vlm:
    build:
      context: .
      dockerfile: Dockerfile
      target: final
    image: vrag-app:latest
    container_name: vrag-vlm-server
    ports:
      - "8001:8001"
    volumes:
      - ./models:/app/models
      - vrag_data:/app/data
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - PYTHONPATH=/app
      - VLM_PORT=8001
    networks:
      - vrag-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    command: >
      bash -c "
        echo 'Starting VLM server...' &&
        cd /app &&
        vllm serve autumncc/Qwen2.5-VL-7B-VRAG 
        --port 8001 
        --host 0.0.0.0 
        --limit-mm-per-prompt image=10 
        --served-model-name Qwen/Qwen2.5-VL-7B-Instruct
        --gpu-memory-utilization 0.8
        --max-num-seqs 16
      "
    depends_on:
      vrag-search:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    restart: unless-stopped

  vrag-demo:
    build:
      context: .
      dockerfile: Dockerfile
      target: final
    image: vrag-app:latest
    container_name: vrag-streamlit-demo
    ports:
      - "8501:8501"
    volumes:
      - ./search_engine/corpus:/app/search_engine/corpus
      - ./models:/app/models
      - vrag_data:/app/data
    environment:
      - SEARCH_URL=http://vrag-search:8002/search
      - VLM_URL=http://vrag-vlm:8001/v1
      - PYTHONPATH=/app
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
    networks:
      - vrag-network
    command: >
      bash -c "
        echo 'Waiting for dependencies...' &&
        sleep 30 &&
        echo 'Starting Streamlit demo...' &&
        cd /app &&
        streamlit run demo/app.py 
        --server.port 8501 
        --server.address 0.0.0.0
        --server.headless true
        --server.enableCORS false
        --server.enableXsrfProtection false
      "
    depends_on:
      vrag-search:
        condition: service_healthy
      vrag-vlm:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Optional: Corpus setup service (run once)
  vrag-setup:
    build:
      context: .
      dockerfile: Dockerfile
      target: final
    image: vrag-app:latest
    container_name: vrag-corpus-setup
    volumes:
      - ./search_engine/corpus:/app/search_engine/corpus
      - ./models:/app/models
      - vrag_data:/app/data
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - PYTHONPATH=/app
    networks:
      - vrag-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    command: >
      bash -c "
        echo 'Setting up corpus...' &&
        cd /app &&
        ./setup_corpus.sh &&
        echo 'Corpus setup complete!'
      "
    profiles:
      - setup
    restart: "no"

networks:
  vrag-network:
    driver: bridge

volumes:
  vrag_data:
    driver: local

# Additional configurations for different environments
x-common-variables: &common-variables
  PYTHONPATH: /app
  CUDA_VISIBLE_DEVICES: 0

x-gpu-resources: &gpu-resources
  deploy:
    resources:
      reservations:
        devices:
          - driver: nvidia
            count: 1
            capabilities: [gpu]

# Production override example
# Use with: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up
---
# docker-compose.prod.yml
version: '3.8'

services:
  vrag-search:
    environment:
      - SEARCH_PORT=8002
      - LOG_LEVEL=INFO
    deploy:
      resources:
        limits:
          memory: 8G
        reservations:
          memory: 4G
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  vrag-vlm:
    environment:
      - VLM_PORT=8001
      - LOG_LEVEL=INFO
    deploy:
      resources:
        limits:
          memory: 32G
        reservations:
          memory: 16G
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  vrag-demo:
    environment:
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - LOG_LEVEL=INFO
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

# Development override example
# Use with: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up
---
# docker-compose.dev.yml
version: '3.8'

services:
  vrag-search:
    volumes:
      - .:/app
      - ./search_engine/corpus:/app/search_engine/corpus
      - ./models:/app/models
    environment:
      - DEBUG=1
      - LOG_LEVEL=DEBUG
    command: >
      bash -c "
        echo 'Starting search engine in development mode...' &&
        cd /app &&
        python -m debugpy --listen 0.0.0.0:5678 --wait-for-client search_engine/search_engine_api.py
      "
    ports:
      - "8002:8002"
      - "5678:5678"  # Debug port

  vrag-vlm:
    volumes:
      - .:/app
      - ./models:/app/models
    environment:
      - DEBUG=1
      - LOG_LEVEL=DEBUG

  vrag-demo:
    volumes:
      - .:/app
      - ./search_engine/corpus:/app/search_engine/corpus
      - ./models:/app/models
    environment:
      - DEBUG=1
      - LOG_LEVEL=DEBUG
      - STREAMLIT_SERVER_RUN_ON_SAVE=true
    command: >
      bash -c "
        echo 'Starting Streamlit in development mode...' &&
        cd /app &&
        streamlit run demo/app.py 
        --server.port 8501 
        --server.address 0.0.0.0
        --server.headless true
        --server.fileWatcherType auto
        --server.runOnSave true
      "
